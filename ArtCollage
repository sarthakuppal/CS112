/*************************************************************************
 *  Compilation:  javac ArtCollage.java
 *  Execution:    java ArtCollage Flo2.jpeg
 *
 *  @author: Sarthak Uppal / su98
 *
 *************************************************************************/

import java.awt.Color;

public class ArtCollage {

    // The orginal picture
    private Picture original;

    // The collage picture
    private Picture collage;

    // The collage Picture consists of collageDimension X collageDimension tiles
    private int collageDimension;

    // A tile consists of tileDimension X tileDimension pixels
    private int tileDimension;
    
    /*
     * One-argument Constructor
     * 1. set default values of collageDimension to 4 and tileDimension to 100
     * 2. initializes original with the filename image
     * 3. initializes collage as a Picture of tileDimension*collageDimension x tileDimension*collageDimension, 
     *    where each pixel is black (see all constructors for the Picture class).
     * 4. update collage to be a scaled version of original (see scaling filter on Week 9 slides)
     *
     * @param filename the image filename
     */
    public ArtCollage (String filename) {

        // WRITE YOUR CODE HERE
        collageDimension = 4;
        tileDimension = 100;
        
        original = new Picture(filename);
        collage = new Picture((tileDimension*collageDimension), (tileDimension*collageDimension));
        

        for (int col = 0; col < collage.width(); col++)
            for (int row = 0; row < collage.height(); row++){
                int scol = col * original.width()  / collage.width();
                int srow = row * original.height() / collage.height();
                Color color = original.get(scol, srow);
                collage.set(col, row, color);
            }
    }

    /*
     * Three-arguments Constructor
     * 1. set default values of collageDimension to cd and tileDimension to td
     * 2. initializes original with the filename image
     * 3. initializes collage as a Picture of tileDimension*collageDimension x tileDimension*collageDimension, 
     *    where each pixel is black (see all constructors for the Picture class).
     * 4. update collage to be a scaled version of original (see scaling filter on Week 9 slides)
     *
     * @param filename the image filename
     */
    public ArtCollage (String filename, int td, int cd) {

        // WRITE YOUR CODE HERE
        collageDimension = cd;
        tileDimension = td;
        original = new Picture(filename);
        
        collage = new Picture((tileDimension*collageDimension), (tileDimension*collageDimension));
        
        for (int col = 0; col < collage.width(); col++)
            for (int row = 0; row < collage.height(); row++){
                int scol = col * original.width()  / collage.width();
                int srow = row * original.height() / collage.height();
                Color color = original.get(scol, srow);
                collage.set(col, row, color);
            }
    }

    /*
     * Returns the collageDimension instance variable
     *
     * @return collageDimension
     */
    public int getCollageDimension() {

        // WRITE YOUR CODE HERE
        return collageDimension;
    }

    /*
     * Returns the tileDimension instance variable
     *
     * @return tileDimension
     */
    public int getTileDimension() {

        // WRITE YOUR CODE HERE
        return tileDimension;
    }

    /*
     * Returns original instance variable
     *
     * @return original
     */
    public Picture getOriginalPicture() {

        // WRITE YOUR CODE HERE
        return original;
    }

    /*
     * Returns collage instance variable
     *
     * @return collage
     */
    public Picture getCollagePicture() {

        // WRITE YOUR CODE HERE
        return collage;
    }
    
    /*
     * Display the original image
     * Assumes that original has been initialized
     */
    public void showOriginalPicture() {

        // WRITE YOUR CODE HERE
        original.show();
    }

    /*
     * Display the collage image
     * Assumes that collage has been initialized
     */
    public void showCollagePicture() {

        // WRITE YOUR CODE HERE
        collage.show();
    }

    /*
     * Replaces the tile at collageCol,collageRow with the image from filename
     * Tile (0,0) is the upper leftmost tile
     *
     * @param filename image to replace tile
     * @param collageCol tile column
     * @param collageRow tile row
     */
    public void replaceTile (String filename,  int collageCol, int collageRow) {

        // WRITE YOUR CODE HERE
        Picture temp = new Picture(filename);
        for (int col = 0; col < tileDimension; col++)
            for(int row = 0; row < tileDimension; row++){
                int tempCol = col*temp.width()/tileDimension;
                int tempRow = row*temp.height()/tileDimension;
                
                Color color = temp.get(tempCol, tempRow);
                collage.set(col + (collageCol *tileDimension), row+ (collageRow*tileDimension), color);
            }
    }
    
    /*
     * Makes a collage of tiles from original Picture
     * original will have collageDimension x collageDimension tiles, each tile
     * has tileDimension X tileDimension pixels
     */
    public void makeCollage () {

        // WRITE YOUR CODE HERE
    
        Picture temp = new Picture(tileDimension, tileDimension);
        for (int x = 0; x < tileDimension; x++)
            for (int y = 0; y < tileDimension; y++){
                int scol = x * original.width() / (tileDimension);
                int srow = y * original.height() / (tileDimension);
                temp.set(x, y, original.get(scol, srow));
        }
        
        for (int col = 0; col < collage.width()/tileDimension; col++)
            for(int row = 0; row < collage.height()/tileDimension; row++){
                for(int i = (tileDimension*col); i < (tileDimension * (col+1)); i++){
                    for(int j = (tileDimension*row); j< (tileDimension*(row+1)); j++) {
                        
                        collage.set(i, j, temp.get((i- (tileDimension*col)), (j- (tileDimension*row))));
                    }
            }
        }     
    }

    
     /* * Colorizes the tile at (collageCol, collageRow) with component 
     * (see CS111 Week 9 slides, the code for color separation is at the 
     *  book's website)
     *
     * @param component is either red, blue or green
     * @param collageCol tile column
     * @param collageRow tile row
     */
    public void colorizeTile (String component,  int collageCol, int collageRow) {

        // WRITE YOUR CODE HERE

        for (int col = (collageCol*tileDimension); col < tileDimension + (collageCol*tileDimension); col++)
            for(int row = (collageRow*tileDimension); row < tileDimension + (tileDimension*collageRow); row++){
                Color color = collage.get(col, row);
                int r = color.getRed();
                int g = color.getGreen();
                int b = color.getBlue(); 
                if(component.equals("red")){
                    collage.set(col, row, new Color(r,0,0));
                } else if(component.equals("green")){
                    collage.set(col, row, new Color(0,g,0));
                }else if (component.equals("blue")){
                    collage.set(col, row, new Color (0, 0, b));
                }
            }
    }

    /*
     * Grayscale tile at (collageCol, collageRow)
     * (see CS111 Week 9 slides, the code for luminance is at the book's website)
     *
     * @param collageCol tile column
     * @param collageRow tile row
     */

    public void grayscaleTile (int collageCol, int collageRow) {

        // WRITE YOUR CODE HERE
        for (int col = collageCol*tileDimension; col < tileDimension + (collageCol * tileDimension); col++)
            for(int row = collageRow *tileDimension; row < tileDimension + (collageRow*tileDimension); row++){
               
                Color gray  = Luminance.toGray(collage.get(col, row));
                collage.set(col, row, gray);
            }
    }


    /*
     *
     *  Test client: use the examples given on the assignment description to test your ArtCollage
     */
    public static void main (String[] args) {

 // Creates a collage of 3x3 tiles. Each tile dimension is 200x200 pixels
 ArtCollage art = new ArtCollage(args[0], 200, 2);
 art.makeCollage();
 
 // Replace 3 tiles 
 art.replaceTile(args[1],0,1);
 art.replaceTile(args[2],1,0);
 art.replaceTile(args[3],1,1);
 art.colorizeTile("green",0,0);
 art.showCollagePicture();
    }
}
