package friends;

import java.util.ArrayList;

import structures.Queue;
import structures.Stack;

public class Friends {

	/**
	 * Finds the shortest chain of people from p1 to p2.
	 * Chain is returned as a sequence of names starting with p1,
	 * and ending with p2. Each pair (n1,n2) of consecutive names in
	 * the returned chain is an edge in the graph.
	 * 
	 * @param g Graph for which shortest chain is to be found.
	 * @param p1 Person with whom the chain originates
	 * @param p2 Person at whom the chain terminates
	 * @return The shortest chain from p1 to p2. Null or empty array list if there is no
	 *         path from p1 to p2
	 * 
	 * Sarthak Uppal
	 */
	public static ArrayList<String> shortestChain(Graph g, String p1, String p2) {
		
		/** COMPLETE THIS METHOD **/
		
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE COMPILER HAPPY
		// CHANGE AS REQUIRED FOR YOUR IMPLEMENTATION
	
		if ( g == null) {
			return null;
		}
		if ( p1 == null) {
			return null;
		}
		if( p2 == null) {
			return null;
		}

		ArrayList<String> sPath = new ArrayList<String>();
		boolean[] visit = new boolean[g.members.length];
		Queue<Person> q = new Queue<Person>();
		Person[] visitAgain = new Person[g.members.length];

		int index = g.map.get(p1);

		q.enqueue(g.members[index]);

		visit[index] = true;

		while(q.isEmpty() == false) {
			Person pivot = q.dequeue();

			int pivotIndex = g.map.get(pivot.name);
			visit[pivotIndex] = true;

			Friend n = pivot.first;

			if(n == null){
				return null;
			}
			while (n != null){
				if (visit[n.fnum] == false) {
					visit[n.fnum] = true;
					visitAgain[n.fnum] = pivot; 
					q.enqueue(g.members[n.fnum]);
				
					if (g.members[n.fnum].name.equals(p2)) {
						pivot = g.members[n.fnum];

						while (pivot.name.equals(p1) == false) {
							sPath.add(0, pivot.name);
							pivot = visitAgain[g.map.get(pivot.name)];
						}
						sPath.add(0, p1);
						return sPath;
					}
				}
				n = n.next;
			}
		}
		return null;
	}
	
	/**
	 * Finds all cliques of students in a given school.
	 * 
	 * Returns an array list of array lists - each constituent array list contains
	 * the names of all students in a clique.
	 * 
	 * @param g Graph for which cliques are to be found.
	 * @param school Name of school
	 * @return Array list of clique array lists. Null or empty array list if there is no student in the
	 *         given school
	 */
	public static ArrayList<ArrayList<String>> cliques(Graph g, String school) {
		
		/** COMPLETE THIS METHOD **/
		
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE COMPILER HAPPY
		// CHANGE AS REQUIRED FOR YOUR IMPLEMENTATION
		if (g == null) {
			return null;
		}
		if(school == null) {
			return null;
		}
		
		ArrayList<ArrayList<String>> cliqueList = new ArrayList<ArrayList<String>>();
		boolean[] visit = new boolean[g.members.length];
		return bfs(g, g.members[0], cliqueList, visit, school);
	}


	/**
	 * Finds and returns all connectors in the graph.
	 * 
	 * @param g Graph for which connectors needs to be found.
	 * @return Names of all connectors. Null or empty array list if there are no connectors.
	 */
	public static ArrayList<String> connectors(Graph g) {
		
		/** COMPLETE THIS METHOD **/
		
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE COMPILER HAPPY
		// CHANGE AS REQUIRED FOR YOUR IMPLEMENTATION
		if (g == null) {
			return null;
		}

		ArrayList<String> connector  = new ArrayList<String>();
		boolean[] visit = new boolean[g.members.length];
		ArrayList<String> precursor = new ArrayList<String>();
		int[] numOfDFS = new int[g.members.length];
		int[] before = new int[g.members.length];
		
		for(int i = 0; i < g.members.length; i++){
			if(visit[i] == false){
				connector = dfs(connector, g, g.members[i], visit, new int[] {0,0}, numOfDFS, before, precursor, true);
			}
		}
		return connector;
	}

	private static ArrayList<ArrayList<String>> bfs(Graph g, Person start, ArrayList<ArrayList<String>> cliqueList, boolean[] visit, String school){
		
		ArrayList<String> results = new ArrayList<String>();
		
		Queue<Person> q = new Queue<Person>();
		
		q.enqueue(start);
		
		visit[g.map.get(start.name)] = true;
		
		Person pivot = new Person();
		Friend n;
		
		if (start.school == null || start.school.equals(school) == false) {
			q.dequeue();
			
			for (int j = 0; j < visit.length; j++) {
				if (visit[j] == false) {
					return bfs(g, g.members[j], cliqueList, visit, school);
				}
			}
		}
		
		while (q.isEmpty() == false) {
			
			pivot = q.dequeue();
			n = pivot.first;
			results.add(pivot.name);
			
			while (n != null) {
				if (visit[n.fnum] == false) {
					if (g.members[n.fnum].school == null) {	
					}else {
						if (g.members[n.fnum].school.equals(school)) {
							q.enqueue(g.members[n.fnum]);
						}
					}
					visit[n.fnum] = true;
				}
				n = n.next;
			}
		}
			if (cliqueList.isEmpty() == false && results.isEmpty()) {	
			} else {
				cliqueList.add(results);
			}
		
		for (int i = 0; i < visit.length; i++) {
			if (visit[i] == false) {
				return bfs(g, g.members[i], cliqueList, visit, school);
			}
		}
		return cliqueList;
	}

	private static ArrayList<String> dfs(ArrayList<String> connector, Graph g, Person start, boolean[] visit, int[] count, int[] numOfDFS, int[] back, ArrayList<String> backward, boolean started){
		
		visit[g.map.get(start.name)] = true;
		Friend n = start.first;
		
		numOfDFS[g.map.get(start.name)] = count[0];
		back[g.map.get(start.name)] = count[1];
		
		while (n != null) {
			if (visit[n.fnum] == false) {
				
				count[0]++;
				count[1]++;
				
				connector = dfs(connector, g, g.members[n.fnum], visit, count, numOfDFS, back, backward, false);
				if (numOfDFS[g.map.get(start.name)] <= back[n.fnum]) {
					if ((connector.contains(start.name) == false && backward.contains(start.name)) || (connector.contains(start.name) == false && started == false)) {
						connector.add(start.name);
					}
				}else {
					int first = back[g.map.get(start.name)];
					
					int second = back[n.fnum];
					
					if (first < second) {
						back[g.map.get(start.name)] = first;
					}else {
						back[g.map.get(start.name)] = second;
					} 
				}		
			
				backward.add(start.name);
				}else {
					int third = back[g.map.get(start.name)];
					int fourth = numOfDFS[n.fnum];
				
					if (third < fourth) {
						back[g.map.get(start.name)] = third;
					}else {
						back[g.map.get(start.name)] = fourth;
					}
				}
				n = n.next;
			}
			return connector;
		}
	}

