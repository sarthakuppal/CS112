package poly;

import java.io.IOException;
import java.util.Scanner;

/**
 * This class implements evaluate, add and multiply for polynomials.
 * 
 * @author Sarthak Uppal
 *
 */
public class Polynomial {
	
	/**
	 * Reads a polynomial from an input stream (file or keyboard). The storage format
	 * of the polynomial is:
	 * <pre>
	 *     <coeff> <degree>
	 *     <coeff> <degree>
	 *     ...
	 *     <coeff> <degree>
	 * </pre>
	 * with the guarantee that degrees will be in descending order. For example:
	 * <pre>
	 *      4 5
	 *     -2 3
	 *      2 1
	 *      3 0
	 * </pre>
	 * which represents the polynomial:
	 * <pre>
	 *      4*x^5 - 2*x^3 + 2*x + 3 
	 * </pre>
	 * 
	 * @param sc Scanner from which a polynomial is to be read
	 * @throws IOException If there is any input error in reading the polynomial
	 * @return The polynomial linked list (front node) constructed from coefficients and
	 *         degrees read from scanner
	 */
	public static Node read(Scanner sc) 
	throws IOException {
		Node poly = null;
		while (sc.hasNextLine()) {
			Scanner scLine = new Scanner(sc.nextLine());
			poly = new Node(scLine.nextFloat(), scLine.nextInt(), poly);
			scLine.close();
		}
		return poly;
	}
	
	/**
	 * Returns the sum of two polynomials - DOES NOT change either of the input polynomials.
	 * The returned polynomial MUST have all new nodes. In other words, none of the nodes
	 * of the input polynomials can be in the result.
	 * 
	 * @param poly1 First input polynomial (front of polynomial linked list)
	 * @param poly2 Second input polynomial (front of polynomial linked list
	 * @return A new polynomial which is the sum of the input polynomials - the returned node
	 *         is the front of the result polynomial
	 */
	public static Node add(Node poly1, Node poly2) {
		/** COMPLETE THIS METHOD **/
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE THIS METHOD COMPILE
		// CHANGE IT AS NEEDED FOR YOUR IMPLEMENTATION
		Node n = null;  
        Node poly1ptr = poly1; 
		Node poly2ptr = poly2;
		Node sum = null;
		int max = 0;
		
        while(poly1ptr !=null){
			while(poly2ptr != null){
			    n = new Node(poly2ptr.term.coeff, poly2ptr.term.degree, n);
			    sum = n;
			    sum.next = n.next;
			    poly2ptr = poly2ptr.next;
			}
				
			n = new Node(poly1ptr.term.coeff, poly1ptr.term.degree, n);
			sum = n;
			sum.next = n.next;
			poly1ptr = poly1ptr.next;
		}
		Node reversed = null;
		Node temp = sum;
		n = null;
		while(temp != null){
			if(max <= temp.term.degree){
				max = temp.term.degree;
			}
			n = new Node(temp.term.coeff, temp.term.degree, n);
			reversed = n;
			reversed.next = n.next;
			temp = temp.next;
		}

		Node count = reversed;
		Node count2;
		while(count != null && count.next != null){
			count2 = count;
			while(count2.next != null){
				if(count.term.degree == count2.next.term.degree){
					count.term.coeff += count2.next.term.coeff;
					count2.next = count2.next.next;
				}else{
					count2 = count2.next;
				}
			}
			count = count.next;
		}
		

	
	    Node fNode;
	    Node headPolySum = null;
	    n = null;
	    for(int i = max; i >=0; i--){
		    fNode = reversed;
		    while(fNode != null){
			    if( i==fNode.term.degree && fNode.term.coeff != 0){
			    	n = new Node(fNode.term.coeff, fNode.term.degree, n);
			    	headPolySum = n;
			    	headPolySum.next = n.next;
			    }
			    fNode = fNode.next;
		    }
	    }
	    return headPolySum;
	    }


		

	/**
	 * Returns the product of two polynomials - DOES NOT change either of the input polynomials.
	 * The returned polynomial MUST have all new nodes. In other words, none of the nodes
	 * of the input polynomials can be in the result.
	 * 
	 * @param poly1 First input polynomial (front of polynomial linked list)
	 * @param poly2 Second input polynomial (front of polynomial linked list)
	 * @return A new polynomial which is the product of the input polynomials - the returned node
	 *         is the front of the result polynomial
	 */
	public static Node multiply(Node poly1, Node poly2) {
		/** COMPLETE THIS METHOD **/
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE THIS METHOD COMPILE
		// CHANGE IT AS NEEDED FOR YOUR IMPLEMENTATION
		Node n = null;  
        Node poly1ptr = poly1; 
		Node poly2ptr = poly2;
		Node product = null;
		int max = 0;

        while(poly1ptr != null){
            while(poly2ptr != null){
				n = new Node(poly1ptr.term.coeff * poly2ptr.term.coeff, poly1ptr.term.degree + poly2ptr.term.degree, n);
				product = n;
				product.next = n.next;
				poly2ptr = poly2ptr.next;
			}
			poly2ptr = poly2;
			poly1ptr = poly1ptr.next;
		}

		Node reversed = null;
		Node temp = product;
		n = null;
		while(temp != null){
			if(max <= temp.term.degree){
				max = temp.term.degree;
			}
			n = new Node(temp.term.coeff, temp.term.degree, n);
			reversed = n;
			reversed.next = n.next;
			temp = temp.next;
		}

		Node count = reversed;
		Node count2;
		while(count != null && count.next != null){
			count2 = count;
			while(count2.next != null){
				if(count.term.degree == count2.next.term.degree){
					count.term.coeff += count2.next.term.coeff;
					count2.next = count2.next.next;
			}else {
				count2 = count2.next;
			}
		}
		count = count.next;
		}

		Node fNode;
		Node end = null;
		n = null;
		for(int i = max; i >= 0; i--){
			fNode = reversed;
			while(fNode != null){
				if( i == fNode.term.degree && fNode.term.coeff != 0){
					n = new Node(fNode.term.coeff, fNode.term.degree, n);
					end = n;
					end.next = n.next;
				}
				fNode = fNode.next;
			}
		}
		return end;
	}
	/**
	 * Evaluates a polynomial at a given value.
	 * 
	 * @param poly Polynomial (front of linked list) to be evaluated
	 * @param x Value at which evaluation is to be done
	 * @return Value of polynomial p at x
	 */
	public static float evaluate(Node poly, float x) {
		/** COMPLETE THIS METHOD **/
		// FOLLOWING LINE IS A PLACEHOLDER TO MAKE THIS METHOD COMPILE
		// CHANGE IT AS NEEDED FOR YOUR IMPLEMENTATION
		float result = 0;

		if(poly != null){
				for(Node var = poly; var != null; var = var.next){
					result += var.term.coeff * Math.pow(x, var.term.degree);
				}
			}
			return result;
		}
	
	/**
	 * Returns string representation of a polynomial
	 * 
	 * @param poly Polynomial (front of linked list)
	 * @return String representation, in descending order of degrees
	 */
	public static String toString(Node poly) {
		if (poly == null) {
			return "0";
		} 
		
		String retval = poly.term.toString();
		for (Node current = poly.next ; current != null ;
		current = current.next) {
			retval = current.term.toString() + " + " + retval;
		}
		return retval;
	}	
}
